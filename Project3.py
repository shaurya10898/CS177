# CS -177# Project 3# By Shaurya Gaur# Following coding standards and guidelines# Import librariesfrom graphics import *import mathimport time# Getting shape's name (addidtional feature)name = input("What would you like your rocket to be named: " )# Creating a graphics windowwin = GraphWin("MagRail Control Panel",500,500)win.setBackground('light grey')win.setCoords(0.0,0.0,10.0,10.0)# Set coordinates # Part1def panel(): # Creating a panel    global inputBox1,inputBox2,inputBox3,inputBox4,anOval,anOval1,anOval2,inputBox5,inputBox6,inputBox7,button1,button2,txtCount,msgString,msg,msg_lst,R    # Initialize Text File        open("message-log.txt", "w").close()        # Defining the window    MegText=Text(Point(4.8,9.5),"MagRail Launch Control Panel")    MegText.setFill("black")    MegText.setSize(18)    MegText.setStyle('bold')    MegText.draw(win)    # ERROR    anOval=Oval(Point(1,8),Point(3,9)).draw(win)    anOval.setFill('grey')    #GO    anOval1=Oval(Point(4.6,8),Point(5.6,9)).draw(win)    anOval1.setFill('red')    #WARNING    anOval2=Oval(Point(7,8),Point(9,9)).draw(win)    anOval2.setFill('black')    warningText=Text(Point(8,8.5),"").draw(win)      #VERIFY    button1=Rectangle(Point(4,6),Point(6,7)).draw(win)    button1.setFill('Grey')    button1txt=Text(Point(5,6.5),"VERIFY").draw(win)    #Launch    button2=Rectangle(Point(4,4),Point(6,5)).draw(win)    button2.setFill('red')    button2txt=Text(Point(5,4.5),"LAUNCH").draw(win)    #Countdown    inputBox=Rectangle(Point(3.9,2.2),Point(5.9,3.2)).draw(win)    txt=Text(Point(4.8,3.5),"Count Down").draw(win)    txtCount=Text(Point(4.8,2.8),"").draw(win)    txtCount.setFill('black')    txtCount.setSize(20)    txtCount.setStyle('bold italic')    #Gravity    inputBox1=Entry(Point(2,2.5),7).draw(win)    inputBox1.setText('10')    txt=Text(Point(2,3.3),"Gravity:").draw(win)    #angle    inputBox2=Entry(Point(2,4.5),7).draw(win)    inputBox2.setText('45')    txt=Text(Point(2,5.3),"Angle:").draw(win)        #power    inputBox3=Entry(Point(2,6.3),7).draw(win)    inputBox3.setText('0')    txt=Text(Point(2,7),"Power:").draw(win)           #Message    R=Rectangle(Point(1,0.5),Point(9,1.5)).draw(win)        R.setFill('white')    #height    inputBox5=Entry(Point(8,6.3),7).draw(win)    inputBox5.setText('0')    txt=Text(Point(8,7),"Height:").draw(win)       #distance    inputBox6=Entry(Point(8,4.5),7).draw(win)    inputBox6.setText('0')    txt=Text(Point(8,5.3),"Distance:").draw(win)    #Flight time    inputBox7=Entry(Point(8,2.5),7).draw(win)    inputBox7.setText('0')    txt=Text(Point(8,3.3),"Flight Time:").draw(win)    # Max height        max_height=Rectangle(Point(1.6,1.7),Point(8,2.3)).draw(win)    max_height.setFill("black")     maxtxt=Text(Point(4.25,2),"The maximum height reached: ").draw(win)    maxtxt.setFill("orange")    maxtxt.setStyle('bold italic')    maxCount=Text(Point(5.3,2),"").draw(win)    maxCount.setFill("white")    maxCount.setStyle("bold italic")    #Menu        Menubutton=Rectangle(Point(0.25,9.25),Point(1.25,9.75)).draw(win)    Menubutton.setFill('green')    menutxt=Text(Point(0.75,9.5),"Menu").draw(win)        # create message list    msg_lst=['Enter value for Gravity, Angle and Power',"Must input a value before launch",\         "Please enter a numeric value","Value not in range","Launch sequence started...",\         'Liftoff...',"Simulation ended"]    msg=Text(Point(5,1),'').draw(win)    msg.setText(':\n:\n'+msg_lst[0])    msgString=msg.getText()    file=open('message-log.txt','w')    file.write(msgString)    file.close()#----------------------------------------------------------------------------#----------------------------------------------------------------------------def reset():#Max height       max_height=Rectangle(Point(2,1.6),Point(8,2.2)).draw(win)    max_height.setFill("black")     maxtxt=Text(Point(4.25,2),"The maximum height reached: ").draw(win)    maxtxt.setFill("orange")    maxtxt.setStyle('bold italic')    maxCount=Text(Point(5.3,2),"").draw(win)    maxCount.setFill("white")    maxCount.setStyle("bold italic")    R.setFill('white')  #----------------------------------------------------------------------------#----------------------------------------------------------------------------def verify(wait):    write = 0    if (inputBox1.getText())=='0' or (inputBox2.getText())=='0' or (inputBox3.getText())=='0':               reset()        msgString=msg.getText()# Displaying message        msgString = msgString.split('\n')        msgString[0] = msgString[1]        msgString[1] = msgString[2]        msgString[2] = msg_lst[1]        msgString = ('\n'.join(msgString))        msg.setText(msgString)                anOval2.setFill('red')        warningText=Text(Point(8,8.5),"WARNING")        warningText.setFill('white')        warningText.draw(win)        wait = 1        write = 1        # If a non-numeric value is entered    elif (inputBox1.getText()).isalpha() or (inputBox2.getText()).isalpha() or (inputBox3.getText()).isalpha():        reset()        # Displaying message        msgString=msg.getText()# getting current message        msgString = msgString.split('\n')        msgString[0] = msgString[1]        msgString[1] = msgString[2]        msgString[2] = msg_lst[2]        msgString = ('\n'.join(msgString))        msg.setText(msgString)        anOvaltxt=Text(Point(2,8.5),'ERROR')        anOvaltxt.draw(win)        anOval2.setFill('red')        warningText=Text(Point(8,8.5),"WARNING")        warningText.setFill('white')        warningText.draw(win)        wait = 1        write = 1# Part 3                           # Status light changes on entering a numeric value    elif (inputBox1.getText()).isdigit():        if eval(inputBox1.getText()) not in range(2,21) or eval(inputBox2.getText()) not in range(25,76) or eval(inputBox3.getText()) not in range(5,111):            reset()            msgString=msg.getText()# Displaying message            msgString = msgString.split('\n')            msgString[0] = msgString[1]            msgString[1] = msgString[2]            msgString[2] = msg_lst[3]            msgString = ('\n'.join(msgString))            msg.setText(msgString)            anOvaltxt=Text(Point(2,8.5),'ERROR').draw(win)            anOval2.setFill('red')            warningText=Text(Point(8,8.5),"WARNING")            warningText.setFill('white')            warningText.draw(win)            wait = 1                      write = 1# Part 5     if eval(inputBox1.getText()) in range(2,21):        if eval(inputBox2.getText()) in range(25,76):            if eval(inputBox3.getText()) in range(5,111):                    anOval2.setFill('black')                    warningText=Text(Point(8,8.5),"").draw(win)                    anOval.setFill("orange")                    anOvaltxt=Text(Point(2,8.3),"").draw(win)                    anOval1.setFill('Green')                    anOval1txt=Text(Point(5.1,8.5),"GO")                    anOval1txt.draw(win)                    button2.setFill('green')                                button1.setFill('green')                       if write == 1:                file=open('message-log.txt','w')        file.write(msgString)        file.close()                        return(wait)#----------------------------------------------------------------------------#----------------------------------------------------------------------------                   def countdown(cancel):#    print('countdown ran')    cancel = 1    click = win.checkMouse()    #display launch sequence message         msgString=msg.getText()# Displaying message        msgString = msgString.split('\n')    msgString[0] = msgString[1]    msgString[1] = msgString[2]    msgString[2] = msg_lst[4]    msgString = ('\n'.join(msgString))    msg.setText(msgString)    for i in range(5,-1,-1):        txtCount.setText(str(i))        anOval2.setFill('red')# flash warning light        time.sleep(0.5)                   anOval2.setFill('black')        time.sleep(0.5)            while countdown == 0 or cancel == 0:            while not click:                click = win.checkMouse()            if (click.getX()>=4 and click.getX()<=6) and (click.getY()>=4 and click.getY()<=5):                cancel = 0                break    file=open('message-log.txt','w')    file.write(msgString)    file.close()    return cancel#----------------------------------------------------------------------------#----------------------------------------------------------------------------                   def launch():    #display launch message        msgString=msg.getText()        msgString = msgString.split('\n')    msgString[0] = msgString[1]    msgString[1] = msgString[2]    msgString[2] = msg_lst[5]    msgString = ('\n'.join(msgString))    msg.setText(msgString)           g=eval(inputBox1.getText())    a=eval(inputBox2.getText())    p=eval(inputBox3.getText())# Part 6# Creating a new window for launch environment    win2 = GraphWin('Megrail Launch Env', 500, 500)    win2.setBackground('grey')    win2.setCoords(0.0,0.0,400.0,400.0)    vehicle=Rectangle(Point(0,0),Point(15,15))    vehicle.setFill("purple")    vehicle.draw(win2)    vehiclepart=Rectangle(Point(15,15),Point(32,17))    vehiclepart.setFill('black')    vehiclepart.draw(win2)    nametxt=Text(Point(2,12),name).draw(win2)    nametxt.setStyle('bold')    colors=['red','yellow', 'blue', 'purple']    # Creating the Magrail Launch environment    for i in range(20, 391,20):        Line(Point(i,0),Point(i,399)).draw(win2)        Line(Point(0,i),Point(399,i)).draw(win2)                    c = Circle(Point(2,2),5)       c.setFill('red')    c.draw(win2)                     i=0    x=32    y=17                              dx=float(p*(math.cos(math.radians(a))))             dy=float(p*(math.sin(math.radians(a))))    heightlist = [] #Y values will be added to this list each time the object moves    while True:        # Part 8        nametxt.move(dx, dy)                c.move(dx,dy) # Animating the ball movement        for n in colors:            nametxt.setFill(n)            time.sleep(0.1)        heightlist.append(c.getCenter().getY())        inputBox5.setText(""+str(c.getCenter().getY()))        inputBox6.setText(''+str(c.getCenter().getX()))        inputBox7.setText(''+str(i))                        dy=dy-g                i=i+1        # turn on warning light when falling        if dy < 0:            anOval2.setFill('red')                                                 if i>15:            break        if dy>0 and c.getCenter().getX()>400:            break        if c.getCenter().getY()<0:            break            txtCount.setText("")    # simulation end message        msgString=msg.getText()# Displaying message    msgString = msgString.split('\n')    msgString[0] = msgString[1]    msgString[1] = msgString[2]    msgString[2] = msg_lst[6]    msgString = ('\n'.join(msgString))    msg.setText(msgString)    file=open('message-log.txt','w')    file.write(msgString)    file.close()    win2.close()        maxheight = 0    #finds highest value in list    for i in range(1, len(heightlist)):                if heightlist[i] > maxheight:                        maxheight = heightlist[i]        maxheightvalue = Text(maxheight,Point(7.5,2)).draw(win)    maxheightvalue.setFill('yellow')    #----------------------------------------------------------------------------#----------------------------------------------------------------------------                   def menu():    #Project 3 part 3    #creates menu button, constructs buttons sensitive to mouse clicks                    menuwin = GraphWin("Pop-Up Menu",450,300)        menuwin.setCoords(0.0,0.0,15.0,10.0)                menuwin.setBackground('light grey')        #Display        display=Rectangle(Point(1,6.5),Point(4,8.5)).draw(menuwin)        display.setFill('yellow')        displaytxt=Text(Point(2.5,7.5),"Display").draw(menuwin)        messagelog=Text(Point(4.25,9),"Message Log").draw(menuwin)        #Clear        clear=Rectangle(Point(4.5,6.5),Point(7.5,8.5)).draw(menuwin)        clear.setFill('yellow')        cleartxt=Text(Point(6,7.5),"Clear").draw(menuwin)        #Test        test=Rectangle(Point(1,1.5),Point(4,3.5)).draw(menuwin)        test.setFill('pink')        testtxt=Text(Point(2.5,2.5),"Test").draw(menuwin)        #Reset        reset=Rectangle(Point(4.5,1.5),Point(7.5,3.5)).draw(menuwin)        reset.setFill('pink')        resettxt=Text(Point(6,2.5),"Reset").draw(menuwin)        lightsbuttons=Text(Point(4.25,4),"Lights/Buttons").draw(menuwin)        #CloseMenu        closemenu = Rectangle(Point(9,6),Point(14,9)).draw(menuwin)        closemenu.setFill('green')        closetxt=Text(Point(11.5,7.5),"Close\nMenu").draw(menuwin)        #Exit Program        exitprogram = Rectangle(Point(9,1),Point(14,4)).draw(menuwin)        exitprogram.setFill('red')        exitprogramtxt=Text(Point(11.5,2.5),"Exit\nProgram").draw(menuwin)        click = menuwin.getMouse()        while True:                    if click != None:                #closemenu                if (click.getX()>=9 and click.getX()<=14) and (click.getY()>=6 and click.getY()<=9):                     menuwin.close()                #Exit                                     if (click.getX()>=9 and click.getX()<=14) and (click.getY()>=1 and click.getY()<=4):                                        exit()                       #Reset                if (click.getX()>=4.5 and click.getX()<=7.5) and (click.getY()>=1.5 and click.getY()<=3.5):                    anOval.setFill('grey')                    anOval1.setFill('red')                    anOval2.setFill('black')                    button1.setFill('Grey')                    button2.setFill('red')                    txtCount.setFill('black')                    click = menuwin.getMouse()                #Test                                    if (click.getX()>=1 and click.getX()<=4) and (click.getY()>=1.5 and click.getY()<=3.5):                    import time                    #uses time.sleep() to                     for i in range(6):                        time.sleep(0.5)                        anOval.setFill('grey')                        anOval1.setFill('red')                        anOval2.setFill('black')                        button1.setFill('Grey')                        button2.setFill('red')                        time.sleep(0.5)                        anOval.setFill('orange')                        anOval1.setFill('green')                        anOval2.setFill('red')                        button1.setFill('green')                        button2.setFill('green')                    click = menuwin.getMouse()                                                                                                            #Clear                   if (click.getX()>=4.5 and click.getX()<=7.5) and (click.getY()>=6.5 and click.getY()<=8.5):                    #clears message log                    open("message-log.txt", "w").close()                    click = menuwin.getMouse()                                    #Display                if (click.getX()>=1 and click.getX()<=4) and (click.getY()>=6.5 and click.getY()<=8.5):                    #reads message log into shell                    infile = open("message-log.txt", "r")                    a = infile.read()                    print(a)                    click = menuwin.getMouse()#----------------------------------------------------------------------------#----------------------------------------------------------------------------def main():# Initialize loop variables        startup = 0    run = True#    xx = 0 #Main Function          while run:        # Initalzile local loop variable        lnc = 0               if startup < 1: #call startup to initialize screen            p = panel()                        startup = 1                  else:           #call reset if window is alrady initialized            p = reset()        while lnc == 0: #loop to keep checking for verfication until launch is pressed            p1=win.getMouse()                        #check for menu click            if (p1.getX()>=.25 and p1.getX()<=1.25) and (p1.getY()>=9.25 and p1.getY()<=9.75):                menu()            #check for verify click            elif (p1.getX()>=4 and p1.getX()<=6) and (p1.getY()>=6 and p1.getY()<=7):                wait = 0    #wait is used for next loop                wait = verify(wait) #verify will return a 1 for wait if there is an error to keep the launch button from becoming active                              while wait == 0: #loops while data is valid and launch button not pressed                    p1 = win.getMouse()                    #checks for launch button click                    if (p1.getX()>=4 and p1.getX()<=6) and (p1.getY()>=4 and p1.getY()<=5):                        cancel = 0                                                lnc = countdown(cancel) #calls countdown. countdown returns lnc as 0 if canceled or 1 once countdown is finsihed                        wait = lnc #when lnc is 1, wait becomes 1 and both loops are ended                    #check for menu click                    elif (p1.getX()>=.25 and p1.getX()<=1.25) and (p1.getY()>=9.25 and p1.getY()<=9.75):                        menu()                    #checks to see if verify was clicked again                    elif (p1.getX()>=4 and p1.getX()<=6) and (p1.getY()>=6 and p1.getY()<=7):                        wait = verify(wait) #wait becomes 1 if there is an error so that launch button deactivates        launch()main()   